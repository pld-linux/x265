--- x265_3.6/source/CMakeLists.txt.orig	2024-05-26 20:21:11.842336919 +0200
+++ x265_3.6/source/CMakeLists.txt	2024-05-26 20:28:09.917087813 +0200
@@ -44,10 +44,8 @@
     string(TOLOWER "${CMAKE_SYSTEM_PROCESSOR}" SYSPROC)
 endif()
 set(X86_ALIASES x86 i386 i686 x86_64 amd64)
-set(ARM_ALIASES armv6l armv7l)
 set(ARM64_ALIASES arm64 arm64e aarch64)
 list(FIND X86_ALIASES "${SYSPROC}" X86MATCH)
-list(FIND ARM_ALIASES "${SYSPROC}" ARMMATCH)
 list(FIND ARM64_ALIASES "${SYSPROC}" ARM64MATCH)
 set(POWER_ALIASES powerpc64 powerpc64le ppc64 ppc64le)
 list(FIND POWER_ALIASES "${SYSPROC}" POWERMATCH)
@@ -70,7 +68,7 @@
         add_definitions(-DPPC64=1)
         message(STATUS "Detected POWER PPC64 target processor")
     endif()
-elseif(ARMMATCH GREATER "-1")
+elseif(${SYSPROC} MATCHES "armv[67]")
     if(CROSS_COMPILE_ARM)
         message(STATUS "Cross compiling for ARM arch")
     else()
@@ -244,45 +244,7 @@
             endif()
         endif()
     endif()
-    if(ARM AND CROSS_COMPILE_ARM)
-        message(STATUS "cross compile arm")
-		set(ARM_ARGS -march=armv6 -mfloat-abi=soft -mfpu=vfp -marm -fPIC)
-    elseif(ARM)
-        find_package(Neon)
-        if(CPU_HAS_NEON)
-            set(ARM_ARGS -mcpu=native -mfloat-abi=hard -mfpu=neon -marm -fPIC)
-            add_definitions(-DHAVE_NEON)
-        else()
-            set(ARM_ARGS -mcpu=native -mfloat-abi=hard -mfpu=vfp -marm)
-        endif()
-    endif()
-	if(ARM64 OR CROSS_COMPILE_ARM64)
-        find_package(Neon)
-        find_package(SVE)
-        find_package(SVE2)
-        if(CPU_HAS_SVE2 OR CROSS_COMPILE_SVE2)
-            message(STATUS "Found SVE2")
-	        set(ARM_ARGS -O3 -march=armv8-a+sve2 -fPIC -flax-vector-conversions)
-            add_definitions(-DHAVE_SVE2)
-            add_definitions(-DHAVE_SVE)
-            add_definitions(-DHAVE_NEON) # for NEON c/c++ primitives, as currently there is no implementation that use SVE2
-        elseif(CPU_HAS_SVE OR CROSS_COMPILE_SVE)
-            message(STATUS "Found SVE")
-	        set(ARM_ARGS -O3 -march=armv8-a+sve -fPIC -flax-vector-conversions)
-            add_definitions(-DHAVE_SVE)
-            add_definitions(-DHAVE_NEON) # for NEON c/c++ primitives, as currently there is no implementation that use SVE
-        elseif(CPU_HAS_NEON)
-            message(STATUS "Found NEON")
-            set(ARM_ARGS -fPIC -flax-vector-conversions)
-            add_definitions(-DHAVE_NEON)
-        else()
-            set(ARM_ARGS -fPIC -flax-vector-conversions)
-        endif()        
-    endif()
-	if(ENABLE_PIC)
-	list(APPEND ARM_ARGS -DPIC)
-	endif()
-    add_definitions(${ARM_ARGS})
+    string(REPLACE " " ";" ARM_ARGS ${CMAKE_CXX_FLAGS})
     if(FPROFILE_GENERATE)
         if(INTEL_CXX)
             add_definitions(-prof-gen -prof-dir="${CMAKE_CURRENT_BINARY_DIR}")
diff -ur x265_3.5.orig/source/dynamicHDR10/CMakeLists.txt x265_3.5/source/dynamicHDR10/CMakeLists.txt
--- x265_3.5.orig/source/dynamicHDR10/CMakeLists.txt	2021-03-16 13:53:00.000000000 +0100
+++ x265_3.5/source/dynamicHDR10/CMakeLists.txt	2021-06-30 10:23:02.973020022 +0200
@@ -42,18 +42,6 @@
             endif()
         endif()
     endif()
-    if(ARM AND CROSS_COMPILE_ARM)
-        set(ARM_ARGS -march=armv6 -mfloat-abi=soft -mfpu=vfp -marm -fPIC)
-    elseif(ARM)
-        find_package(Neon)
-        if(CPU_HAS_NEON)
-            set(ARM_ARGS -mcpu=native -mfloat-abi=hard -mfpu=neon -marm -fPIC)
-            add_definitions(-DHAVE_NEON)
-        else()
-            set(ARM_ARGS -mcpu=native -mfloat-abi=hard -mfpu=vfp -marm)
-        endif()
-    endif()
-    add_definitions(${ARM_ARGS})
     if(FPROFILE_GENERATE)
         if(INTEL_CXX)
             add_definitions(-prof-gen -prof-dir="${CMAKE_CURRENT_BINARY_DIR}")
