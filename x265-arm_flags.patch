--- x265_3.6/source/CMakeLists.txt.orig	2024-05-26 20:21:11.842336919 +0200
+++ x265_3.6/source/CMakeLists.txt	2024-05-26 20:28:09.917087813 +0200
@@ -44,10 +44,8 @@
     string(TOLOWER "${CMAKE_SYSTEM_PROCESSOR}" SYSPROC)
 endif()
 set(X86_ALIASES x86 i386 i686 x86_64 amd64)
-set(ARM_ALIASES armv6l armv7l)
 set(ARM64_ALIASES arm64 arm64e aarch64)
 list(FIND X86_ALIASES "${SYSPROC}" X86MATCH)
-list(FIND ARM_ALIASES "${SYSPROC}" ARMMATCH)
 list(FIND ARM64_ALIASES "${SYSPROC}" ARM64MATCH)
 set(POWER_ALIASES powerpc64 powerpc64le ppc64 ppc64le)
 list(FIND POWER_ALIASES "${SYSPROC}" POWERMATCH)
@@ -70,7 +68,7 @@
         add_definitions(-DPPC64=1)
         message(STATUS "Detected POWER PPC64 target processor")
     endif()
-elseif(ARMMATCH GREATER "-1")
+elseif(${SYSPROC} MATCHES "armv[67]")
     if(CROSS_COMPILE_ARM)
         message(STATUS "Cross compiling for ARM arch")
     else()
@@ -244,123 +244,7 @@
             endif()
         endif()
     endif()
-    if(ARM AND CROSS_COMPILE_ARM)
-        message(STATUS "cross compile arm")
-		set(ARM_ARGS -march=armv6 -mfloat-abi=soft -mfpu=vfp -marm -fPIC)
-    elseif(ARM)
-        find_package(Neon)
-        if(CPU_HAS_NEON)
-            set(ARM_ARGS -mcpu=native -mfloat-abi=hard -mfpu=neon -marm -fPIC)
-            add_definitions(-DHAVE_NEON)
-        else()
-            set(ARM_ARGS -mcpu=native -mfloat-abi=hard -mfpu=vfp -marm)
-        endif()
-    endif()
-    if(ARM64)
-        message(STATUS "Found Neon")
-        set(CPU_HAS_NEON 1)
-        add_definitions(-DX265_ARCH_ARM64=1 -DHAVE_NEON=1)
-
-        if(CROSS_COMPILE_ARM64)
-            # Handle cross-compilation options.
-            if(CROSS_COMPILE_NEON_DOTPROD)
-                set(CPU_HAS_NEON_DOTPROD 1)
-            endif()
-            if(CROSS_COMPILE_NEON_I8MM)
-                set(CPU_HAS_NEON_I8MM 1)
-                # Impose the constraint that Neon I8MM implies Neon DotProd.
-                set(CPU_HAS_NEON_DOTPROD 1)
-            endif()
-            if(CROSS_COMPILE_SVE)
-                set(CPU_HAS_SVE 1)
-                # Impose the constraint that SVE implies Neon DotProd and I8MM.
-                set(CPU_HAS_NEON_DOTPROD 1)
-                set(CPU_HAS_NEON_I8MM 1)
-            endif()
-            if(CROSS_COMPILE_SVE2)
-                set(CPU_HAS_SVE2 1)
-                # SVE2 implies SVE and Neon DotProd.
-                set(CPU_HAS_SVE 1)
-                set(CPU_HAS_NEON_DOTPROD 1)
-                # Impose the constraint that SVE2 implies Neon I8MM.
-                set(CPU_HAS_NEON_I8MM 1)
-            endif()
-        else()
-            if(CMAKE_SYSTEM_NAME MATCHES "Linux|Darwin")
-                find_package(NEON_DOTPROD)
-                find_package(NEON_I8MM)
-                find_package(SVE)
-                find_package(SVE2)
-            else()
-                message(STATUS "Compile time feature detection unsupported on this platform")
-            endif()
-        endif()
-
-        if(CPU_HAS_NEON_DOTPROD)
-            # Neon DotProd is mandatory from Armv8.4.
-            message(STATUS "Found Neon DotProd")
-            set(ARM_ARGS -O3 -march=armv8.2-a+dotprod)
-            add_definitions(-DHAVE_NEON_DOTPROD=1)
-        endif()
-        if(CPU_HAS_NEON_I8MM)
-            # Neon I8MM is mandatory from Armv8.6.
-            message(STATUS "Found Neon I8MM")
-            # Impose the constraint that Neon I8MM implies Neon DotProd.
-            if(NOT CPU_HAS_NEON_DOTPROD)
-                message(FATAL_ERROR "Unsupported AArch64 feature combination (Neon I8MM without Neon DotProd)")
-            endif()
-            set(ARM_ARGS -O3 -march=armv8.2-a+dotprod+i8mm)
-            add_definitions(-DHAVE_NEON_I8MM=1)
-        endif()
-        if(CPU_HAS_SVE)
-            message(STATUS "Found SVE")
-            # Impose the constraint that SVE implies Neon I8MM.
-            if(NOT CPU_HAS_NEON_I8MM)
-                message(FATAL_ERROR "Unsupported AArch64 feature combination (SVE without Neon I8MM)")
-            endif()
-            set(ARM_ARGS -O3 -march=armv8.2-a+dotprod+i8mm+sve)
-            add_definitions(-DHAVE_SVE=1)
-        endif()
-        if(CPU_HAS_SVE2)
-            message(STATUS "Found SVE2")
-            # SVE2 is only available from Armv9.0, and armv9-a implies +dotprod
-            set(ARM_ARGS -O3 -march=armv9-a+i8mm+sve2)
-            add_definitions(-DHAVE_SVE2=1)
-        endif()
-        set(ARM_ARGS ${ARM_ARGS} -fPIC)
-        # Do not allow implicit vector type conversions in Clang builds (this
-        # is already the default in GCC builds).
-        check_cxx_compiler_flag(-flax-vector-conversions=none CC_HAS_FLAX_VEC_CONV_NONE)
-        if(CC_HAS_FLAX_VEC_CONV_NONE)
-            set(ARM_ARGS ${ARM_ARGS} -flax-vector-conversions=none)
-        endif()
-        if(CPU_HAS_SVE)
-            set(SVE_HEADER_TEST "
-#ifndef __ARM_NEON_SVE_BRIDGE
-#error 1
-#endif
-#include <arm_sve.h>
-#include <arm_neon_sve_bridge.h>
-int main() { return 0; }")
-            set(OLD_CMAKE_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS})
-            # CMAKE_REQUIRED_FLAGS requires a space-delimited string, whereas
-            # ARM_ARGS is defined and used elsewhere as a ;-list.
-            foreach(ARM_ARG ${ARM_ARGS})
-                string(APPEND CMAKE_REQUIRED_FLAGS " ${ARM_ARG}")
-            endforeach()
-            check_c_source_compiles("${SVE_HEADER_TEST}" SVE_HEADER_C_TEST_COMPILED)
-            check_cxx_source_compiles("${SVE_HEADER_TEST}" SVE_HEADER_CXX_TEST_COMPILED)
-            set(CMAKE_REQUIRED_FLAGS ${OLD_CMAKE_REQUIRED_FLAGS})
-            if(SVE_HEADER_C_TEST_COMPILED AND SVE_HEADER_CXX_TEST_COMPILED)
-                add_definitions(-DHAVE_SVE_BRIDGE=1)
-                set(HAVE_SVE_BRIDGE 1)
-            endif()
-        endif()
-    endif()
-	if(ENABLE_PIC)
-	list(APPEND ARM_ARGS -DPIC)
-	endif()
-    add_definitions(${ARM_ARGS})
+    string(REPLACE " " ";" ARM_ARGS ${CMAKE_CXX_FLAGS})
     if(FPROFILE_GENERATE)
         if(INTEL_CXX)
             add_definitions(-prof-gen -prof-dir="${CMAKE_CURRENT_BINARY_DIR}")
diff -ur x265_3.5.orig/source/dynamicHDR10/CMakeLists.txt x265_3.5/source/dynamicHDR10/CMakeLists.txt
--- x265_3.5.orig/source/dynamicHDR10/CMakeLists.txt	2021-03-16 13:53:00.000000000 +0100
+++ x265_3.5/source/dynamicHDR10/CMakeLists.txt	2021-06-30 10:23:02.973020022 +0200
@@ -42,18 +42,6 @@
             endif()
         endif()
     endif()
-    if(ARM AND CROSS_COMPILE_ARM)
-        set(ARM_ARGS -march=armv6 -mfloat-abi=soft -mfpu=vfp -marm -fPIC)
-    elseif(ARM)
-        find_package(Neon)
-        if(CPU_HAS_NEON)
-            set(ARM_ARGS -mcpu=native -mfloat-abi=hard -mfpu=neon -marm -fPIC)
-            add_definitions(-DHAVE_NEON)
-        else()
-            set(ARM_ARGS -mcpu=native -mfloat-abi=hard -mfpu=vfp -marm)
-        endif()
-    endif()
-    add_definitions(${ARM_ARGS})
     if(FPROFILE_GENERATE)
         if(INTEL_CXX)
             add_definitions(-prof-gen -prof-dir="${CMAKE_CURRENT_BINARY_DIR}")
